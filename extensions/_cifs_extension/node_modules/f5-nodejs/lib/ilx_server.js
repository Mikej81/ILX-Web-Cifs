/*jshint node:true*/
'use strict';

var net = require('net'),
    util = require('util');

var ILXClient = require('./ilx_client.js'),
    ILXRequest = require('./ilx_request.js'),
    ILXResponse = require('./ilx_response.js');

var defaultPort = 530;
ILXServer.prototype._instantiated = false;

/**
 * Represents a "multiplex" ILX server that accepts multiple messages over the same TCP connection.
 *
 * Expected message format: <length:UInt32BE><json_rpc_string:string>
 *
 * @constructor
 * @augments net.Server
 * @param {object} [methods] - hash of methods in {name: callback} format (optional)
 * @param {object} [options] - server options (optional)
 * @param {boolean} [options.debug=false] - debug logging
 * @param {integer} [options.timeout=5000] - TCP socket timeout in milliseconds
 */
function ILXServer (methods, options) {

    var ILXPlugin = require('./ilx_plugin.js');

    options = options || {};
    options.debug = options.debug || false;
    options.timeout = options.timeout || 5000;

    net.Server.call(this);

    this._defaultMethod = false;
    this._methods = methods || {};
    this._options = options;
    ILXServer.prototype._instantiated = true;

    // connection handler
    this.on('connection', function (socket) {
        var client = new ILXClient(socket, options),
            that = this;

        if (options.debug) {
            console.log('ILX-SERVER-MUX:DEBUG:: Client connected');

            client.on('request', function (data) {
                console.log('ILX-SERVER-MUX:DEBUG:: Request:', data);
            });

            socket.on('clientError', function (err) {
                console.log('ILX-SERVER-MUX:ERROR::', err);
            });

            socket.on('error', function (err) {
                console.log('ILX-SERVER-MUX:ERROR:: Socket Error:', err);
                socket.destroy();
            });

            socket.on('close', function () {
                console.log('ILX-SERVER-MUX:DEBUG:: Socket closed');
            });

            socket.on('timeout', function () {
                console.log('ILX-SERVER-MUX:DEBUG:: Timeout');
            });

            // replace ILXClient.send
            client._send = client.send;
            client.send = function (message) {
                console.log('ILX-SERVER-MUX:DEBUG:: Response:', message);
                client._send(message);
            };
        }

        client.on('request', function (data) {
            var req;

            try {
                req = JSON.parse(data);

            } catch (err) {
                new ILXResponse(null, client).error(
                    'Parse error',
                    -32700,
                    {request: data, error: err.message}
                );

                socket.emit('clientError', 'Parse error', socket);
                socket.destroy();
            }

            if (!req) {
                return;

            } else if (req.id) {
                if (req.method && that._methods[req.method]) {
                    that._methods[req.method](
                        new ILXRequest(req),
                        new ILXResponse(req.id, client)
                    );

                } else if (that._defaultMethod) {
                    that._defaultMethod(
                        new ILXRequest(req),
                        new ILXResponse(req.id, client)
                    );

                } else {
                    new ILXResponse(req.id, client).error(
                        'Method not found',
                        -32601,
                        {method: req.method}
                    );
                }

            // notifications get no response
            } else {
                if (req.method && that._methods[req.method]) {
                    that._methods[req.method](new ILXRequest(req));

                } else if (that._defaultMethod) {
                    that._defaultMethod(new ILXRequest(req));
                }
            }
        });

        socket.setTimeout(options.timeout, function () {
            socket.destroy();
        });
    });
}

util.inherits(ILXServer, net.Server);

/**
 * Add a method handler.
 *
 * @param {string} name - method name
 * @param {ILXServer~methodCallback} callback that handles the request
 */
ILXServer.prototype.addMethod = function (name, callback) {
    this._methods[name] = callback;
};

/**
 * Remove a method handler.
 *
 * @param {string} name - method name
 */
ILXServer.prototype.removeMethod = function (name) {
    delete this._methods[name];
};

/**
 * Set a default handler for when no other method is available.
 *
 * @param {ILXServer~methodCallback} callback - callback that handles the request
 */
ILXServer.prototype.setDefaultMethod = function (callback) {
    this._defaultMethod = callback;
};

/**
 * Listen to connections.
 *
 * @override
 * @param {int} [port=530] - port to listen on (optional)
 */
ILXServer.prototype.listen = function (port) {
    port = port || defaultPort;

    if (this._options.debug) {
        console.log('ILX-SERVER-MUX:INFO:: Listening on port', port);
    }

    ILXServer.super_.prototype.listen.call(this, port);
};

/**
 * Callback function that handles an incoming request.
 * @callback ILXServer~methodCallback
 * @param {ILXRequest} request  - request object
 * @param {ILXResponse} [response] - response object (not available for notifications)
 */

module.exports = ILXServer;
